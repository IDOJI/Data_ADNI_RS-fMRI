RS.fMRI_5_Check.Results___Not.Extracted.Subjects.Lists = function(path_Extracted.Results.Folder,
path_Subjects.List,
Band.Type = NULL){
#=============================================================================
# RDS list
#=============================================================================
Extracted_RID = list.files(path_Extracted.Results.Folder) %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
#=============================================================================
# Subjects list
#=============================================================================
Subjects_List.df = read.csv(path_Subjects.List)
if(!is.null(Band.Type)){
Subjects_List_RID = Subjects_List.df %>% filter(NFQ___BAND.TYPE == Band.Type) %>% select(RID) %>% unlist() %>% unname() %>% sort()
}else{
Subjects_List_RID = Subjects_List.df %>% select(RID) %>% unlist() %>% unname() %>% sort()
}
#=============================================================================
# Find RID not yet included
#=============================================================================
Selected_RID = setdiff(Subjects_List_RID, Extracted_RID)
if(length(Selected_RID)==0){
cat("\n", crayon::green("Congratulations! All RID in the Subject List are included!"),"\n")
}else if(length(Selected_RID)>0){
cat(Selected_RID)
stop("There are RIDs not included! Check!")
}else{
cat(setdiff(Extracted_RID, Subjects_List_RID))
stop("There are more RIDs not in Subjects List")
}
}
# Voxelwise
path_Extracted.Results.Folder = "F:/Extracted_Results/Papers___Data/Papers___Data___ADNI___RS.fMRI___BOLD.Signals___Voxelwise___AAL3/Data___MNI__Raw"
# Voxelwise
path_Extracted.Results.Folder = "F:/Extracted_Results/Papers___Data/Papers___Data___ADNI___RS.fMRI___BOLD.Signals___Voxelwise___AAL3/Data___MNI__Raw"
################################################################################
path_Subjects.List = "C:/Users/lleii/Dropbox/Github/Papers___Data/Papers___Data___ADNI___RS.fMRI___Subjects.Lists/___Subjects_Lists_Exported/Final/[Final_Selected]_Subjects_list.csv"
################################################################################
path_Subjects.List = "C:/Users/lleii/Dropbox/Github/Papers___Data/___Papers___Data___ADNI___RS.fMRI___Subjects.Lists/___Subjects_Lists_Exported/Final/[Final_Selected]_Subjects_list.csv"
Band.Type = "SB"
RS.fMRI_5_Check.Results___Not.Extracted.Subjects.Lists(path_Extracted.Results.Folder, path_Subjects.List, Band.Type)
##############################################################################################
# 0. Loading functions
##############################################################################################
# rm(list=ls())
#=============================================================================================
# Mac
#=============================================================================================
# path_OS = "/Users/Ido/"
# path_External.Drive = "/Volumes/Seagate/"
#============================================================================================
# Windows
#============================================================================================
path_OS = "C:/Users/lleii/"
#============================================================================================
require(tidyverse)
require(dplyr)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/ADNIprep/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/StatsR/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/refineR/R"), full.names = T) %>% walk(source)
#=============================================================================================
################################################################################
path_Subjects.List = "C:/Users/lleii/Dropbox/Github/Papers___Data/___Papers___Data___ADNI___RS.fMRI___Subjects.Lists/___Subjects_Lists_Exported/Final/[Final_Selected]_Subjects_list.csv"
Band.Type = "SB"
RS.fMRI_5_Check.Results___Not.Extracted.Subjects.Lists(path_Extracted.Results.Folder, path_Subjects.List, Band.Type)
#=============================================================================
# RDS list
#=============================================================================
Extracted_RID = list.files(path_Extracted.Results.Folder) %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
Extracted_RID
length(Extracted_RID )
#=============================================================================
# Subjects list
#=============================================================================
Subjects_List.df = read.csv(path_Subjects.List)
if(!is.null(Band.Type)){
Subjects_List_RID = Subjects_List.df %>% filter(NFQ___BAND.TYPE == Band.Type) %>% select(RID) %>% unlist() %>% unname() %>% sort()
}else{
Subjects_List_RID = Subjects_List.df %>% select(RID) %>% unlist() %>% unname() %>% sort()
}
Subjects_List_RID
length(Subjects_List_RID )
Subjects_List_RID %in% Extracted_RID
sum(Subjects_List_RID %in% Extracted_RID)
sum(Extracted_RID %in% Subjects_List_RID)
RS.fMRI_5_Check.Results___Not.Extracted.Subjects.Lists = function(path_Extracted.Results.Folder,
path_Subjects.List,
Band.Type = NULL){
#=============================================================================
# RDS list
#=============================================================================
Extracted_RID = list.files(path_Extracted.Results.Folder) %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
#=============================================================================
# Subjects list
#=============================================================================
Subjects_List.df = read.csv(path_Subjects.List)
if(!is.null(Band.Type)){
Subjects_List_RID = Subjects_List.df %>% filter(NFQ___BAND.TYPE == Band.Type) %>% select(RID) %>% unlist() %>% unname() %>% sort()
}else{
Subjects_List_RID = Subjects_List.df %>% select(RID) %>% unlist() %>% unname() %>% sort()
}
# sum(Subjects_List_RID %in% Extracted_RID)
# sum(Extracted_RID %in% Subjects_List_RID)
#=============================================================================
# Find RID not yet included
#=============================================================================
Selected_RID = setdiff(Subjects_List_RID, Extracted_RID)
if(length(Selected_RID)==0){
cat("\n", crayon::green("Congratulations! All RID in the Subject List are included!"),"\n")
}else if(length(Selected_RID)>0){
cat(Selected_RID)
stop("There are RIDs not included! Check!")
}else{
cat(setdiff(Extracted_RID, Subjects_List_RID))
stop("There are more RIDs not in Subjects List")
}
}
Subjects_List.df
Subjects_List.df %>% dim
SIEMENS_1 = 128
SIEMENS_2 = 188
MB = 146
GE = 237
Philips_X = 17
Philips_O = 122
SIEMENS_1 + SIEMENS_2 + GE + Philips_X + Philips_O + MB
SIEMENS_1 + SIEMENS_2 + GE + Philips_X + Philips_O
Clipboard_to_path()
path_Manufacture = "F:/ADNI/ADNI_RS.fMRI___MB/Completed___AutoMask___O"
path_Subjects.List = "C:/Users/lleii/Dropbox/Github/Papers___Data/___Papers___Data___ADNI___RS.fMRI___Subjects.Lists/___Subjects_Lists_Exported/Final/[Final_Selected]_Subjects_list.csv"
Manufacturer = "Philips"
Files = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist
Files
#=============================================================================
# Files list
#=============================================================================
Files = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist %>% str_extract("RID_\\d+")
Files
#=============================================================================
# Files list
#=============================================================================
Files = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist %>% str_extract("(?<=RID_)\\d+")
Files
Subjects.df = read.csv(path_Subjects.List)
Subjects.df$NFQ___MANUFACTURER
Subjects.df$MANUFACTURER_NEW
Subjects.df = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type))
Subjects.df
dim(Subjects.df)
Subjects.df = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type)) %>% select(RID) %>% unlist()
#=============================================================================
# Extracting Matched RID from Subjects list
#=============================================================================
Subjects_List_RID = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type)) %>% select(RID) %>% unlist()
Subjects_List_RID
Subjects_List_RID = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type)) %>% select(RID) %>% unlist() %>% unname()
Subjects_List_RID
#=============================================================================
# Files list  & Extracting RID
#=============================================================================
Files_RID = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
Files_RID
setdiff(Subjects_List_RID, Files_RID)
cat(setdiff(Subjects_List_RID, Files_RID))
cat("\n", crayon::green(setdiff(Subjects_List_RID, Files_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
cat("\n", crayon::green(setdiff(Subjects_List_RID, Files_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
if(length(Subjects_List_RID)>length(Files_RID)){
cat("\n", crayon::green(setdiff(Subjects_List_RID, Files_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else if(length(Subjects_List_RID) < length(Files_RID)){
cat("\n", crayon::green(setdiff(Files_RID, Subjects_List_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else{
stop("")
}
RS.fMRI_5_Check.Results___Sub.Folders.Each.Manufacturer = function(path_Manufacture, path_Subjects.List, Manufacture, Band){
#=============================================================================
# Files list  & Extracting RID
#=============================================================================
Files_RID = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
#=============================================================================
# Extracting Matched RID from Subjects list
#=============================================================================
Subjects_List_RID = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type)) %>% select(RID) %>% unlist() %>% unname()
if(length(Subjects_List_RID)>length(Files_RID)){
cat("\n", crayon::green(setdiff(Subjects_List_RID, Files_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else if(length(Subjects_List_RID) < length(Files_RID)){
cat("\n", crayon::green(setdiff(Files_RID, Subjects_List_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else{
stop("")
}
}
RS.fMRI_5_Check.Results___Sub.Folders.Each.Manufacturer = function(path_Manufacture, path_Subjects.List, Manufacture, Band){
#=============================================================================
# Files list  & Extracting RID
#=============================================================================
Files_RID = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
#=============================================================================
# Extracting Matched RID from Subjects list
#=============================================================================
Subjects_List_RID = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type)) %>% select(RID) %>% unlist() %>% unname()
if(length(Subjects_List_RID)>length(Files_RID)){
cat("\n", crayon::green(setdiff(Subjects_List_RID, Files_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else if(length(Subjects_List_RID) < length(Files_RID)){
cat("\n", crayon::green(setdiff(Files_RID, Subjects_List_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else{
stop("")
}
}
#===============================================================================
# Checking the number of "Sub" Folders
#===============================================================================
Clipboard_to_path()
#===============================================================================
# Checking the number of "Sub" Folders
#===============================================================================
Clipboard_to_path()
#===============================================================================
# Philips
#===============================================================================
path_Manufacture = c("D:/ADNI/ADNI_RS.fMRI___SB/AutoMask___O/MNI_EPI_AAL3___Philips", "D:/ADNI/ADNI_RS.fMRI___SB/AutoMask___X/MNI_EPI_AAL3___Philips")
Manufacturer = "Philips"
Band.Type = "SB"
RS.fMRI_5_Check.Results___Sub.Folders.Each.Manufacturer(path_Manufacture, path_Subjects.List, Manufacture, Band)
RS.fMRI_5_Check.Results___Sub.Folders.Each.Manufacturer = function(path_Manufacture, path_Subjects.List, Manufacture, Band){
#=============================================================================
# Files list  & Extracting RID
#=============================================================================
Files_RID = sapply(path_Manufacture, function(y){
list.files(y)
}) %>% unlist %>% str_extract("(?<=RID_)\\d+") %>% as.numeric()
#=============================================================================
# Extracting Matched RID from Subjects list
#=============================================================================
Subjects_List_RID = read.csv(path_Subjects.List) %>% filter(MANUFACTURER_NEW == paste0(Manufacturer, "_", Band.Type)) %>% select(RID) %>% unlist() %>% unname()
if(length(Subjects_List_RID)>length(Files_RID)){
cat("\n", crayon::green(setdiff(Subjects_List_RID, Files_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Files'"),"\n")
}else if(length(Subjects_List_RID) < length(Files_RID)){
cat("\n", crayon::green(setdiff(Files_RID, Subjects_List_RID)), "\n")
cat("\n", crayon::blue("These are RIDs not in 'Subjects List'"),"\n")
}else{
stop("")
}
}
#===============================================================================
# Philips
#===============================================================================
path_Manufacture = c("D:/ADNI/ADNI_RS.fMRI___SB/AutoMask___O/MNI_EPI_AAL3___Philips", "D:/ADNI/ADNI_RS.fMRI___SB/AutoMask___X/MNI_EPI_AAL3___Philips")
Manufacturer = "Philips"
Band.Type = "SB"
RS.fMRI_5_Check.Results___Sub.Folders.Each.Manufacturer(path_Manufacture, path_Subjects.List, Manufacture, Band)
